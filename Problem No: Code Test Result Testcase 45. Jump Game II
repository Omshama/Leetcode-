class Solution {
    public int jump(int[] nums) {
        // Variable to count the total number of jumps needed to reach the end
        int totalJumps = 0;
        
        // The destination is the last index of the array
        int destination = nums.length - 1;
        
        // Variable to track the maximum coverage of jumps
        int coverage = 0;
        
        // Variable to track the index of the last jump
        int lastIdx = 0;
        
        // If the array has only one element, no jumps are needed
        if (nums.length == 1) {
            return 0;
        }
        
        // Loop through the array up to the second-to-last element
        for (int i = 0; i < nums.length - 1; i++) {
            // Update the coverage to the farthest point we can reach from the current index
            coverage = Math.max(coverage, i + nums[i]);
            
            // If we have reached the index of the last jump
            if (i == lastIdx) {
                // Update the lastIdx to the current coverage
                lastIdx = coverage;
                
                // Increment the total number of jumps
                totalJumps++;
                
                // If the current coverage is enough to reach or exceed the destination
                if (coverage >= destination) {
                    // Return the total number of jumps needed
                    return totalJumps;
                }
            }
        }
        
        // Return the total number of jumps (although we should have returned inside the loop)
        return totalJumps;
    }
}
