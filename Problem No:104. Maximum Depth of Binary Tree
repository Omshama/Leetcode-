/**
 * Definition for a binary tree node.
 * 
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

/**
 * Class containing the solution to find the maximum depth of a binary tree.
 */
class Solution {
    /**
     * Returns the maximum depth of a binary tree.
     *
     * @param root the root node of the binary tree
     * @return the maximum depth of the tree
     */
    public int maxDepth(TreeNode root) {
        // Base case: if the tree is empty, return 0
        if (root == null)
            return 0;

        // Recursive case: compute the depth of the left and right subtrees
        int leftDepth = maxDepth(root.left);
        int rightDepth = maxDepth(root.right);

        // Return the maximum of the two depths plus one for the current node
        return 1 + Math.max(leftDepth, rightDepth);
    }
}
