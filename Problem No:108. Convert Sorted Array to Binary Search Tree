/**
 * Definition for a binary tree node.
 * 
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 * 
 * This class contains a solution to convert a sorted array into a balanced 
 * binary search tree (BST). The middle element of the array is selected as 
 * the root, and the left and right halves of the array are recursively 
 * turned into the left and right subtrees of the root.
 */
class Solution {

    /**
     * Main function to convert a sorted array to a balanced BST.
     * 
     * @param nums: Input sorted array.
     * @return TreeNode: The root node of the resulting balanced BST.
     */
    public TreeNode sortedArrayToBST(int[] nums) {
        // If the input array is empty, return null.
        if (nums.length == 0) {
            return null;
        }
        
        // Call the helper function to construct the tree.
        return createTree(nums, 0, nums.length - 1);
    }

    /**
     * Helper function to construct the BST recursively.
     * 
     * @param nums: Input sorted array.
     * @param start: Starting index of the current subarray.
     * @param end: Ending index of the current subarray.
     * @return TreeNode: The root node of the subtree created from the subarray.
     */
    public TreeNode createTree(int[] nums, int start, int end) {
        // Base case: If start index is greater than end index, return null.
        if (start > end) {
            return null;
        }

        // Find the middle element of the current subarray.
        int mid = (start + end) / 2;

        // Create a new TreeNode with the middle element as the root.
        TreeNode node = new TreeNode(nums[mid]);

        // Recursively construct the left subtree with the left half of the array.
        node.left = createTree(nums, start, mid - 1);

        // Recursively construct the right subtree with the right half of the array.
        node.right = createTree(nums, mid + 1, end);

        // Return the root of this subtree.
        return node;
    }
}
