
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        // Create a dummy node to serve as the starting point
        ListNode dummy = new ListNode(0);
        // This will be used to build the new list
        ListNode curr = dummy;

        // Traverse both lists while neither is empty
        while (l1 != null && l2 != null) {
            // Compare the current nodes of both lists
            if (l1.val <= l2.val) {
                // If l1's value is smaller, append it to the result and move l1 to the next node
                curr.next = l1;
                l1 = l1.next;
            } else {
                // If l2's value is smaller, append it to the result and move l2 to the next node
                curr.next = l2;
                l2 = l2.next;
            }
            // Move the current pointer to the newly added node
            curr = curr.next;
        }

        // Append the remaining nodes of l1 or l2 to the result
        if (l1 != null) {
            curr.next = l1;
        } else {
            curr.next = l2;
        }

        // The merged list is next to the dummy node
        return dummy.next;
    }
}
